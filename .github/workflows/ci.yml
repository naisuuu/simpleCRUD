name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Build Maven
      run: mvn -B package --file pom.xml
      
    - name: Test
      run: mvn test

  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      #https://docs.github.com/en/actions/publishing-packages/publishing-docker-images
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }} #Here
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx b
      uses: docker/setup-buildx-action@v3

    - name: Build and push
      uses: docker/build-push-action@v6
      with:
        push: true
        tags: ${{ vars.DOCKERHUB_USERNAME }}/simplecrud:latest

  deploy:
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Configure SSH key
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to EC2
        run: |
            ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password ${{ secrets.DOCKERHUB_TOKEN }}'

      - name: Stop existing container
        run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'docker ps -q | xargs -r docker stop'

      - name: Remove existing container
        run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'docker ps -aq | xargs -r docker rm'

      - name: Pull and run the new container
        run: |
                ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} 'docker pull ${{ secrets.DOCKERHUB_USERNAME }}/simplecrud:latest && docker run -d -p 8080:8080 --name simplecrud ${{ secrets.DOCKERHUB_USERNAME }}/simplecrud:latest'